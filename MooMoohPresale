/**
 *Submitted for verification at BscScan.com on 2023-07-03
*/

// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function decimals() external view returns (uint256);
    function symbol() external view returns (string memory);
    function name() external view returns (string memory);
    function getOwner() external view returns (address);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address _owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IUser {
    function getUserRegistered(address account) external view returns (bool);
    function register(address referree,address referral) external returns (bool);
    function getUserReferree(address account,uint256 level) external view returns (address[] memory);
    function getUserUpline(address account,uint256 level) external view returns (address[] memory);
    function getUserReferral(address account) external view returns (address);
    function pushUserReferreeWithPermit(address account,address referree,uint256 level) external returns (bool);
}

contract permission {
    mapping(address => mapping(string => bytes32)) private permit;

    function newpermit(address adr,string memory str) internal { permit[adr][str] = bytes32(keccak256(abi.encode(adr,str))); }

    function clearpermit(address adr,string memory str) internal { permit[adr][str] = bytes32(keccak256(abi.encode("null"))); }

    function checkpermit(address adr,string memory str) public view returns (bool) {
        if(permit[adr][str]==bytes32(keccak256(abi.encode(adr,str)))){ return true; }else{ return false; }
    }

    modifier forRole(string memory str) {
        require(checkpermit(msg.sender,str),"Permit Revert!");
        _;
    }
}

contract MooMoohPresale is permission {
    
    address public owner;

    address[] contributors;

    address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
    address USDT = 0x55d398326f99059fF775485246999027B3197955;
    
    address public mwWallet = 0x58c68340076a2722C402614866A936ba8A2Fb49f;
    address public tsWallet = 0x640c020F15D410F6E7b08C873F6572e1CCCee2e8;
    address public rsWallet = 0xF0Df31a1A123a63c8DC50B9d89e0eF59Ad80b621;
    address public devWallet = 0xc5Fca183AC0952417FDdB47dD9d9738E62D258d9;

    uint256 direcAmount = 20 * 1e18;
    uint256 matchingAmount = 100 * 1e18;
    uint256 public totalSold;

    bool public ActivedContract;

    struct Contributor {
        mapping(address => uint256) balance;
        mapping(address => uint256) reward;
        mapping(address => uint256) claimed;
        mapping(uint256 => uint256) stack;
        bool contributed;
    }

    mapping(address => Contributor) contributor;
    mapping(address => bool) public allowedDepositToken;

    bool locked;
    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }

    constructor() {
        newpermit(msg.sender,"permit");
        newpermit(msg.sender,"owner");
        owner = msg.sender;
        allowedDepositToken[USDT] = true; //USDT
        allowedDepositToken[BUSD] = true; //BUSD
    }

    function getContributors() public view returns (address[] memory) {
        return contributors;
    }

    function getTotalContributors() public view returns (uint256) {
        return contributors.length;
    }

    function balanceOf(address account,address token) public view returns (uint256) {
        return contributor[account].balance[token];
    }

    function rewardOf(address account,address token) public view returns (uint256) {
        return contributor[account].reward[token];
    }

    function stackOf(address account,uint256 level) public view returns (uint256) {
        return contributor[account].stack[level];
    }

    function claimedOf(address account,address token) public view returns (uint256) {
        return contributor[account].claimed[token];
    }

    function isContributed(address account) public view returns (bool) {
        return contributor[account].contributed;
    }

    function contribute(address account,address referral,address userCA,address token,uint256 amount) public noReentrant returns (bool) {
        require(ActivedContract,"MOOMOOHPRESALE REVERT: CONTRIBUTION TEMPORARY CLOSED");
        IERC20(token).transferFrom(msg.sender,address(this),amount);
        totalSold += amount;
        if(!contributor[account].contributed){
            contributor[account].contributed = true;
            contributors.push(account);
        }
        IUser userMananger = IUser(userCA);
        address[] memory upline = new address[](10);
        if(!userMananger.getUserRegistered(account)){
            require(userMananger.getUserRegistered(referral),"MOOMOOHPRESALE REVERT: REFERRAL MUST BE REGISTERED");
            require(account!=referral,"MOOMOOHPRESALE REVERT: REFERRAL MUST NOT BE REFERREE");
            userMananger.register(account,referral);
            upline = userMananger.getUserUpline(account,10);
            for(uint256 i=0; i < 10; i++){
                if(upline[i]!=address(0)){
                    userMananger.pushUserReferreeWithPermit(account,upline[i],i);
                }
            }
        }else{
            referral = userMananger.getUserReferral(account);
        }
        upline = userMananger.getUserUpline(account,10);
        IERC20(token).transfer(mwWallet,amount * 300 / 1000);
        IERC20(token).transfer(tsWallet,amount * 66 / 1000);
        IERC20(token).transfer(rsWallet,amount * 66 / 1000);
        IERC20(token).transfer(devWallet,amount * 66 / 1000);
        contributor[account].balance[token] += amount;
        uint256 totalBalance = balanceOf(referral,USDT) + balanceOf(referral,BUSD);
        if(totalBalance >= direcAmount){ updateReward(referral,token,amount/10,0); }
        if(shouldMatching(upline[1],userCA)){ updateReward(upline[1],token,amount/100,1); }
        if(shouldMatching(upline[2],userCA)){ updateReward(upline[2],token,amount/100,2); }
        if(shouldMatching(upline[3],userCA)){ updateReward(upline[3],token,amount/100,3); }
        if(shouldMatching(upline[4],userCA)){ updateReward(upline[4],token,amount/100,4); }
        if(shouldMatching(upline[5],userCA)){ updateReward(upline[5],token,amount/100,5); }
        if(shouldMatching(upline[6],userCA)){ updateReward(upline[6],token,amount/100,6); }
        if(shouldMatching(upline[7],userCA)){ updateReward(upline[7],token,amount/100,7); }
        if(shouldMatching(upline[8],userCA)){ updateReward(upline[8],token,amount/100,8); }
        if(shouldMatching(upline[9],userCA)){ updateReward(upline[9],token,amount/100,9); }
        return true;
    }

    function updateReward(address account,address token,uint256 amount,uint256 stackLevel) internal {
        contributor[account].reward[token] += amount;
        contributor[account].stack[stackLevel] += amount;
    }

    function claimPresaleReferral(address account,address token) public noReentrant returns (bool) {
        require(contributor[account].reward[token]>contributor[account].claimed[token],"MOOMOOHPRESALE REVERT: NOTHING TO CLAIM");
        uint256 divAmount = contributor[account].reward[token] - contributor[account].claimed[token];
        contributor[account].claimed[token] = contributor[account].reward[token];
        IERC20(token).transfer(account,divAmount);
        return true;
    }

    function approveDepositToken(address token,bool flag) public forRole("permit") returns (bool) {
        allowedDepositToken[token] = flag;
        return true;
    }

    function shouldMatching(address account,address userCA) public view returns (bool) {
        uint256 totalBalance = balanceOf(account,USDT) + balanceOf(account,BUSD);
        if(totalBalance >= matchingAmount && isInvitedBinary(account,userCA,2,direcAmount) && account != address(0)){
            return true;
        }
        return false;
    }

    function isInvitedBinary(address account,address userCA,uint256 minimumCount,uint256 minimumAmount) public view returns (bool) {
        IUser userMananger = IUser(userCA);
        address[] memory referree = userMananger.getUserReferree(account,0);
        uint256 enumCount = 0;
        if(referree.length>=minimumCount){
            for(uint256 i=0; i < referree.length; i++){
                uint256 totalBalance = balanceOf(referree[i],USDT) + balanceOf(referree[i],BUSD);
                if(totalBalance>=minimumAmount){
                    enumCount += 1;
                }
            }
            if(enumCount>=minimumCount){ return true; }
        }
        return false;
    }

    function activedContractToggle() public forRole("owner") returns (bool) {
        ActivedContract = !ActivedContract;
        return true;
    }

    function withdrawToken(address token,uint256 amount) public forRole("owner") returns (bool) {
        IERC20(token).transfer(msg.sender,amount);
        return true;
    }

    function withdrawETH(uint256 amount) public forRole("owner") returns (bool) {
        (bool success,) = msg.sender.call{ value: amount }("");
        require(success, "MOOMOOHPRESALE REVERT: FAIL TO WITHDRAW ETH");
        return true;
    }

    function grantRole(address adr,string memory role) public forRole("owner") returns (bool) {
        newpermit(adr,role);
        return true;
    }

    function revokeRole(address adr,string memory role) public forRole("owner") returns (bool) {
        clearpermit(adr,role);
        return true;
    }

    function transferOwnership(address adr) public forRole("owner") returns (bool) {
        newpermit(adr,"owner");
        clearpermit(msg.sender,"owner");
        owner = adr;
        return true;
    }

    receive() external payable {}
}
